#shader vertex 
#version 330 core
        
layout(location = 0) in vec2 position;
layout(location = 1) in vec4 a_Pencolor;

out vec4 v_Pencolor;

void main()
{
     v_Pencolor = a_Pencolor;
     gl_Position= vec4(position.x, position.y, 0.0, 1.0);
};     

#shader fragment
#version 330 core
        
out vec4 fragColor;

in vec4 g_Pencolor;

void main()
{
    fragColor = g_Pencolor;
};


#shader geometry
#version 330 core

layout (lines) in;
layout (triangle_strip, max_vertices = 4) out;





uniform float lineWidth = 0.1; // Adjust this value for desired line width

void main()
{
     
    
    vec2 p0 = gl_in[0].gl_Position.xy;
    vec2 p1 = gl_in[1].gl_Position.xy;
    float l=300.0f;
    float r=300.0f;
    float t=300.0f;
    float b=300.0f;
    if(p0.x>p1.x)
    {
        r=p0.x;
        l=p1.x;
    }
    else
    {
        r=p1.x;
        l=p0.x;
    }
    if(p0.y>p1.y)
    {
        t=p0.y;
        b=p1.y;
    }
    else
    {
        t=p1.y;
        b=p0.y;
    }
    float nh = 0.0192f;
    float nw = 0.0108f;

     gl_Position = vec4(r+nw,b-nh, 0.0, 1.0);
    EmitVertex();
    
    gl_Position = vec4(l-nw,b-nh, 0.0, 1.0);
    EmitVertex();

    gl_Position = vec4(r+nw,t+nh, 0.0, 1.0);
    EmitVertex();
    
    gl_Position = vec4(l-nw,t+nh, 0.0, 1.0);
    EmitVertex();
    
   
    
    EndPrimitive();
}
